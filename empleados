controllers de las solicitudes PUT, DELETE, GET Y POST
const pool = require('../config/db');

// Obtener todos los empleados
const getAllEmployees = async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM employees');
        res.json(result.rows);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Obtener empleado por ID
const getEmployeeById = async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM employees WHERE employee_id = $1', [id]);
        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'Empleado no encontrado' });
        }
        res.json(result.rows[0]);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Eliminar empleado por ID
const deleteEmployee = async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('DELETE FROM employees WHERE employee_id = $1', [id]);
        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'Empleado no encontrado' });
        }
        res.json({ message: 'Empleado eliminado exitosamente' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Actualizar empleado por ID
const updateEmployee = async (req, res) => {
    const { id } = req.params;
    const { first_name, last_name, email, job_id, salary } = req.body;

    try {
        const result = await pool.query(
            'UPDATE employees SET first_name = $1, last_name = $2, email = $3, job_id = $4, salary = $5 WHERE employee_id = $6',
            [first_name, last_name, email, job_id, salary, id]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'Empleado no encontrado' });
        }
        res.json({ message: 'Empleado actualizado exitosamente' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

module.exports = {
    getAllEmployees,
    getEmployeeById,
    deleteEmployee,
    updateEmployee,
};


--registro del login
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const pool = require('../config/db');

// Registrar un usuario
exports.registerUser = async (req, res) => {
    const { username, password } = req.body;

    try {
        // Encriptar la contraseña
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // Insertar en la base de datos
        await pool.query(
            'INSERT INTO users (username, password) VALUES ($1, $2)',
            [username, hashedPassword]
        );

        res.status(201).json({ message: 'Usuario registrado exitosamente' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Login de usuario
exports.loginUser = async (req, res) => {
    const { username, password } = req.body;

    try {
        // Buscar el usuario por su nombre
        const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);

        if (result.rowCount === 0) {
            return res.status(400).json({ message: 'Usuario o contraseña incorrectos' });
        }

        const user = result.rows[0];

        // Comparar contraseñas
        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(400).json({ message: 'Usuario o contraseña incorrectos' });
        }

        // Crear un token
        const token = jwt.sign(
            { id: user.id, username: user.username },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );

        res.json({ token });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
--front-end
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2>Login</h2>
        <form id="loginForm">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
        <div id="message" class="mt-3"></div>
    </div>
    <script src="app.js"></script>
</body>
</html>
--app.js
const token = localStorage.getItem('token');

if (!token) {
    // Si no hay token, redirigir al login
    window.location.href = '/index.html';
}

// Manejar el cierre de sesión
const logoutBtn = document.getElementById('logoutBtn');
logoutBtn.addEventListener('click', () => {
    localStorage.removeItem('token'); // Eliminar el token
    window.location.href = '/index.html'; // Redirigir al login
});
